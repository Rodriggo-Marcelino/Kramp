{
  "openapi": "3.0.1",
  "info": {
    "title": "Kramp API",
    "description": "Kramp API",
    "contact": {
      "name": "Página de Contato",
      "url": "https://www.exemplo.com.br"
    },
    "license": {
      "name": "Licença",
      "url": "https://www.exemplo.com.br"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Gym/Create": {
      "post": {
        "tags": [
          "Gym"
        ],
        "summary": "Cria uma nova academia",
        "description": "Este endpoint permite a criação de uma nova academia no sistema.\nA requisição deve incluir as informações necessárias, como nome da academia, descrição, nome de usuário, senha e número do documento.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGymCommand"
              },
              "examples": {
                "valid-request": {
                  "summary": "Exemplo de requisição válida",
                  "value": {
                    "name": "Academia XYZ",
                    "description": "Uma academia completa para todas as idades.",
                    "username": "academia_xyz",
                    "password": "senhaSegura123",
                    "documentNumber": "123456789"
                  }
                },
                "missing-fields": {
                  "summary": "Campos obrigatórios ausentes",
                  "value": {
                    "name": "",
                    "description": "Uma academia moderna.",
                    "username": "academia_mod",
                    "password": "",
                    "documentNumber": "987654321"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Criado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GymInfoViewModel"
                },
                "examples": {
                  "success-response": {
                    "summary": "Criação bem-sucedida",
                    "value": {
                      "name": "Academia XYZ",
                      "description": "Uma academia completa para todas as idades.",
                      "username": "academia_xyz",
                      "refreshToken": "abc123",
                      "refreshTokenExpiryTime": "2024-12-31T23:59:59Z",
                      "tokenJWT": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Requisição Inválida - Erros de Validação",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "examples": {
                  "missing-name": {
                    "summary": "Nome ausente",
                    "value": {
                      "errors": [
                        "O nome é obrigatório."
                      ]
                    }
                  },
                  "invalid-password": {
                    "summary": "Senha muito curta",
                    "value": {
                      "errors": [
                        "A senha deve ter no mínimo 6 caracteres."
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Não Autorizado - Credenciais Inválidas",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Acesso não autorizado. Verifique suas credenciais."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erro Interno no Servidor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Ocorreu um erro inesperado. Por favor, tente novamente mais tarde."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Gym/All": {
      "get": {
        "tags": [
          "Gym"
        ],
        "summary": "Retorna todas as academias",
        "description": "Este endpoint recupera uma lista de todas as academias cadastradas no sistema.\n",
        "responses": {
          "200": {
            "description": "Sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GymInfoViewModel"
                  }
                },
                "examples": {
                  "success-response": {
                    "summary": "Lista de academias",
                    "value": [
                      {
                        "name": "Academia XYZ",
                        "description": "Uma academia completa para todas as idades.",
                        "username": "academia_xyz",
                        "refreshToken": "abc123",
                        "refreshTokenExpiryTime": "2024-12-31T23:59:59Z",
                        "tokenJWT": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      },
                      {
                        "name": "Academia ABC",
                        "description": "Uma academia moderna com equipamentos de ponta.",
                        "username": "academia_abc",
                        "refreshToken": "def456",
                        "refreshTokenExpiryTime": "2024-12-31T23:59:59Z",
                        "tokenJWT": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erro Interno no Servidor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Ocorreu um erro inesperado ao processar sua solicitação. Por favor, tente novamente mais tarde."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Gym/{Id}": {
      "get": {
        "tags": [
          "Gym"
        ],
        "summary": "Retorna uma academia específica",
        "description": "Este endpoint recupera os detalhes de uma academia específica com base no ID fornecido.\n",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "description": "O ID da academia que deseja recuperar.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GymInfoViewModel"
                },
                "examples": {
                  "success-response": {
                    "summary": "Academia encontrada",
                    "value": {
                      "name": "Academia XYZ",
                      "description": "Uma academia completa para todas as idades.",
                      "username": "academia_xyz",
                      "refreshToken": "abc123",
                      "refreshTokenExpiryTime": "2024-12-31T23:59:59Z",
                      "tokenJWT": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Não Encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Academia não encontrada com o ID fornecido."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erro Interno no Servidor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Ocorreu um erro inesperado ao processar sua solicitação. Por favor, tente novamente mais tarde."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Gym/Update/{Id}": {
      "put": {
        "tags": [
          "Gym"
        ],
        "summary": "Atualiza uma academia específica",
        "description": "Este endpoint permite a atualização das informações de uma academia específica com base no ID fornecido.\n",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "description": "O ID da academia que deseja atualizar.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGymCommand"
              },
              "examples": {
                "valid-update": {
                  "summary": "Exemplo de atualização válida",
                  "value": {
                    "name": "Academia XYZ Atualizada",
                    "description": "Uma academia renovada para todas as idades.",
                    "username": "academia_xyz_atualizada",
                    "documentNumber": "123456789"
                  }
                },
                "partial-update": {
                  "summary": "Exemplo de atualização parcial",
                  "value": {
                    "name": "Academia XYZ Nova"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GymInfoViewModel"
                },
                "examples": {
                  "success-response": {
                    "summary": "Atualização bem-sucedida",
                    "value": {
                      "name": "Academia XYZ Atualizada",
                      "description": "Uma academia renovada para todas as idades.",
                      "username": "academia_xyz_atualizada",
                      "refreshToken": "abc123",
                      "refreshTokenExpiryTime": "2024-12-31T23:59:59Z",
                      "tokenJWT": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Requisição Inválida - Erros de Validação",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "examples": {
                  "missing-fields": {
                    "summary": "Campos obrigatórios ausentes",
                    "value": {
                      "errors": [
                        "O nome é obrigatório.",
                        "O número do documento é obrigatório."
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Não Encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Academia não encontrada com o ID fornecido."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erro Interno no Servidor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Ocorreu um erro inesperado ao processar sua solicitação. Por favor, tente novamente mais tarde."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Gym/Delete/{Id}": {
      "delete": {
        "tags": [
          "Gym"
        ],
        "summary": "Exclui uma academia específica",
        "description": "Este endpoint permite a exclusão de uma academia específica com base no ID fornecido.\n",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "description": "O ID da academia que deseja excluir.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sucesso - Nenhum conteúdo retornado após exclusão."
          },
          "404": {
            "description": "Não Encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Academia não encontrada com o ID fornecido."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erro Interno no Servidor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Ocorreu um erro inesperado ao processar sua solicitação. Por favor, tente novamente mais tarde."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Manager/Create": {
      "post": {
        "tags": [
          "Manager"
        ],
        "summary": "Cria um Manager",
        "description": "Endpoint para criação de um novo gerente de academia.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateManagerCommand"
              },
              "examples": {
                "validRequest": {
                  "summary": "Exemplo de uma requisição válida",
                  "value": {
                    "name": "João",
                    "surname": "Silva",
                    "userBio": "Gerente com vasta experiência em logística.",
                    "birthDate": "1985-07-20",
                    "username": "joaosilva",
                    "password": "segura123",
                    "documentNumber": "123456789"
                  }
                },
                "invalidRequest": {
                  "summary": "Exemplo de uma requisição inválida",
                  "value": {
                    "name": "",
                    "surname": "S",
                    "userBio": "Curta",
                    "birthDate": "2010-01-01",
                    "username": "",
                    "password": "123",
                    "documentNumber": "1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Retorna o novo item criado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerInfoViewModel"
                },
                "examples": {
                  "createdResponse": {
                    "summary": "Exemplo de resposta de criação",
                    "value": {
                      "responseInfo": null,
                      "value": {
                        "name": "Maria",
                        "surname": "Pereira",
                        "userBio": "Experiência em gestão de academias de bairro.",
                        "birthDate": "1990-02-15",
                        "username": "mariapereira",
                        "refreshToken": "YW5vdGhlcnVzZXI6c2VjdXJlcGFzczEyMw==",
                        "refreshTokenExpiryTime": "2025-01-15T23:59:59Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Se houver erro da parte do usuário no preenchimento",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "validationErrorExample": {
                    "summary": "Exemplo de erro de validação",
                    "value": {
                      "type": "https://tools.ietf.org/html/rfc9110#section-15.5.1",
                      "title": "One or more validation errors occurred.",
                      "status": 400,
                      "errors": {
                        "Name": [
                          "O nome é obrigatório.",
                          "O nome deve ter no mínimo 2 caracteres."
                        ],
                        "Surname": [
                          "O sobrenome deve ter no mínimo 2 caracteres."
                        ],
                        "UserBio": [
                          "A biografia deve ter no mínimo 10 caracteres."
                        ],
                        "Password": [
                          "A senha deve ter no mínimo 6 caracteres."
                        ],
                        "Username": [
                          "O nome de usuário é obrigatório."
                        ],
                        "BirthDate": [
                          "O gerente deve ter pelo menos 18 anos."
                        ],
                        "DocumentNumber": [
                          "O número do documento deve ter no mínimo 5 caracteres."
                        ]
                      },
                      "traceId": "00-f831d795a9d6b9cfef10038505155ce4-b9bc766eb9eb421a-00"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erro Interno no Servidor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Ocorreu um erro inesperado ao processar sua solicitação. Por favor, tente novamente mais tarde."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Manager/All": {
      "get": {
        "tags": [
          "Manager"
        ],
        "summary": "Obtém a lista de todos os gerentes cadastrados.",
        "description": "Endpoint para recuperar todos os gerentes cadastrados na academia.",
        "responses": {
          "200": {
            "description": "Lista de gerentes retornada com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagerInfoViewModel"
                  }
                },
                "examples": {
                  "singleManagerResponse": {
                    "summary": "Exemplo de resposta contendo um único gerente",
                    "value": [
                      {
                        "name": "João",
                        "surname": "Silva",
                        "userBio": "Gerente com vasta experiência em logística.",
                        "birthDate": "1985-07-20",
                        "username": "joaosilva",
                        "refreshToken": "dXNlcm5hbWU6cGFzc3dvcmQ=",
                        "refreshTokenExpiryTime": "2024-12-31T23:59:59Z"
                      }
                    ]
                  },
                  "multipleManagersResponse": {
                    "summary": "Exemplo de resposta contendo múltiplos gerentes",
                    "value": [
                      {
                        "name": "João",
                        "surname": "Silva",
                        "userBio": "Gerente com vasta experiência em logística.",
                        "birthDate": "1985-07-20",
                        "username": "joaosilva",
                        "refreshToken": "dXNlcm5hbWU6cGFzc3dvcmQ=",
                        "refreshTokenExpiryTime": "2024-12-31T23:59:59Z"
                      },
                      {
                        "name": "Maria",
                        "surname": "Pereira",
                        "userBio": "Experiência em gestão de academias de bairro.",
                        "birthDate": "1990-02-15",
                        "username": "mariapereira",
                        "refreshToken": "YW5vdGhlcnVzZXI6c2VjdXJlcGFzczEyMw==",
                        "refreshTokenExpiryTime": "2025-01-15T23:59:59Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "204": {
            "description": "Nenhum gerente encontrado.",
            "content": {}
          }
        }
      }
    },
    "/api/Manager/{Id}": {
      "get": {
        "tags": [
          "Manager"
        ],
        "summary": "Obtém informações de um gerente específico pelo ID.",
        "description": "Endpoint para recuperar os detalhes de um gerente específico utilizando o ID fornecido.",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "description": "O UUID do gerente que deseja recuperar.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Informações do gerente retornadas com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerInfoViewModel"
                },
                "examples": {
                  "successResponse": {
                    "summary": "Exemplo de resposta de sucesso",
                    "value": {
                      "name": "João",
                      "surname": "Silva",
                      "userBio": "Gerente com vasta experiência em logística.",
                      "birthDate": "1985-07-20",
                      "username": "joaosilva",
                      "refreshToken": "dXNlcm5hbWU6cGFzc3dvcmQ=",
                      "refreshTokenExpiryTime": "2024-12-31T23:59:59Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Gerente não encontrado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "managerNotFoundError": {
                    "summary": "Erro quando o gerente com o ID fornecido não é encontrado",
                    "value": {
                      "message": "Gerente não encontrado com o ID fornecido."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Manager/Update/{Id}": {
      "put": {
        "tags": [
          "Manager"
        ],
        "summary": "Atualiza as informações de um gerente específico.",
        "description": "Endpoint para atualizar os detalhes de um gerente utilizando o ID fornecido.",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "description": "O UUID do gerente que deseja atualizar.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagerCommand"
              },
              "examples": {
                "validRequest": {
                  "summary": "Exemplo de uma requisição válida",
                  "value": {
                    "name": "João Atualizado",
                    "surname": "Silva",
                    "userBio": "Gerente com nova experiência em gerenciamento.",
                    "birthDate": "1985-07-20",
                    "username": "joao.atualizado",
                    "documentNumber": "987654321"
                  }
                },
                "invalidRequest": {
                  "summary": "Exemplo de uma requisição inválida",
                  "value": {
                    "name": "",
                    "surname": "S",
                    "userBio": "Curta",
                    "birthDate": "2010-01-01",
                    "username": "",
                    "documentNumber": "1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gerente atualizado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerInfoViewModel"
                },
                "examples": {
                  "successResponse": {
                    "summary": "Exemplo de resposta de sucesso",
                    "value": {
                      "name": "João Atualizado",
                      "surname": "Silva",
                      "userBio": "Gerente com nova experiência em gerenciamento.",
                      "birthDate": "1985-07-20",
                      "username": "joao.atualizado",
                      "documentNumber": "987654321"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Se houver erro da parte do usuário no preenchimento",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "validationErrorExample": {
                    "summary": "Exemplo de erro de validação",
                    "value": {
                      "type": "https://tools.ietf.org/html/rfc9110#section-15.5.1",
                      "title": "One or more validation errors occurred.",
                      "status": 400,
                      "errors": {
                        "Name": [
                          "O nome é obrigatório.",
                          "O nome deve ter no mínimo 2 caracteres."
                        ],
                        "Surname": [
                          "O sobrenome deve ter no mínimo 2 caracteres."
                        ],
                        "UserBio": [
                          "A biografia deve ter no mínimo 10 caracteres."
                        ],
                        "Password": [
                          "A senha deve ter no mínimo 6 caracteres."
                        ],
                        "Username": [
                          "O nome de usuário é obrigatório."
                        ],
                        "BirthDate": [
                          "O gerente deve ter pelo menos 18 anos."
                        ],
                        "DocumentNumber": [
                          "O número do documento deve ter no mínimo 5 caracteres."
                        ]
                      },
                      "traceId": "00-f831d795a9d6b9cfef10038505155ce4-b9bc766eb9eb421a-00"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Gerente não encontrado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "managerNotFoundError": {
                    "summary": "Erro quando o gerente com o ID fornecido não é encontrado",
                    "value": {
                      "message": "Gerente não encontrado com o ID fornecido."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Manager/Delete/{Id}": {
      "delete": {
        "tags": [
          "Manager"
        ],
        "summary": "Deleta um gerente específico pelo ID.",
        "description": "Endpoint para deletar um gerente específico utilizando o ID fornecido.",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "description": "O UUID do gerente que deseja deletar.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gerente deletado com sucesso.",
            "content": {
              "application/json": {
                "examples": {
                  "successResponse": {
                    "summary": "Exemplo de resposta de sucesso",
                    "value": {
                      "message": "Gerente deletado com sucesso."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Erro de validação de entrada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "invalidIdFormatError": {
                    "summary": "Erro quando o ID fornecido não está no formato UUID válido",
                    "value": {
                      "message": "O formato do ID é inválido. Deve ser um UUID válido."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Gerente não encontrado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "managerNotFoundError": {
                    "summary": "Erro quando o gerente com o ID fornecido não é encontrado",
                    "value": {
                      "message": "Gerente não encontrado com o ID fornecido."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Member/Create": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Cria um novo membro",
        "description": "Este endpoint permite a criação de um novo membro no sistema.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberCommand"
              },
              "examples": {
                "valid-request": {
                  "summary": "Exemplo de requisição válida",
                  "value": {
                    "name": "João",
                    "surname": "Silva",
                    "userBio": "Entusiasta de fitness e saúde.",
                    "birthDate": "1990-05-20",
                    "username": "joaosilva",
                    "password": "senhaSegura123",
                    "documentNumber": "987654321"
                  }
                },
                "invalid-request-missing-fields": {
                  "summary": "Exemplo de requisição inválida com campos ausentes",
                  "value": {
                    "name": "",
                    "surname": "",
                    "birthDate": "",
                    "username": "joaosilva",
                    "password": ""
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberInfoViewModel"
                },
                "examples": {
                  "success-response": {
                    "summary": "Resposta bem-sucedida",
                    "value": {
                      "name": "João",
                      "surname": "Silva",
                      "userBio": "Entusiasta de fitness e saúde.",
                      "birthDate": "1990-05-20",
                      "username": "joaosilva",
                      "refreshToken": "abc123",
                      "refreshTokenExpiryTime": "2024-12-31T23:59:59Z",
                      "tokenJWT": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Requisição Inválida - Erros de Validação",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "examples": {
                  "missing-fields": {
                    "summary": "Campos obrigatórios ausentes",
                    "value": {
                      "errors": [
                        "O nome é obrigatório.",
                        "O sobrenome é obrigatório.",
                        "A senha é obrigatória."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erro Interno no Servidor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Ocorreu um erro inesperado ao processar sua solicitação. Por favor, tente novamente mais tarde."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Member/Read": {
      "get": {
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Member/Update": {
      "put": {
        "tags": [
          "Member"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Member/Delete": {
      "delete": {
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Professional/Create": {
      "post": {
        "tags": [
          "Professional"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfessionalCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfessionalInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Professional/Read": {
      "get": {
        "tags": [
          "Professional"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfessionalInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Professional/Update": {
      "put": {
        "tags": [
          "Professional"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfessionalCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfessionalInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Professional/Delete": {
      "delete": {
        "tags": [
          "Professional"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfessionalInfoViewModel"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateGymCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "O nome da academia",
            "minLength": 2,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Uma breve descrição da academia",
            "maxLength": 244,
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "O nome de usuário para a conta da academia",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "A senha para a conta da academia",
            "minLength": 6,
            "nullable": true
          },
          "documentNumber": {
            "type": "string",
            "description": "O número do documento associado à academia",
            "minLength": 5,
            "nullable": true
          }
        },
        "required": [
          "name",
          "username",
          "password",
          "documentNumber"
        ]
      },
      "CreateManagerCommand": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "O nome do gerente.",
            "minLength": 2,
            "example": "João"
          },
          "Surname": {
            "type": "string",
            "description": "O sobrenome do gerente.",
            "minLength": 2,
            "example": "Silva"
          },
          "UserBio": {
            "type": "string",
            "description": "A biografia do gerente.",
            "minLength": 10,
            "example": "Gerente com vasta experiência em logística.",
            "nullable": true
          },
          "BirthDate": {
            "type": "string",
            "format": "date",
            "description": "A data de nascimento do gerente.",
            "example": "1985-07-20"
          },
          "Username": {
            "type": "string",
            "description": "O nome de usuário do gerente.",
            "example": "joaosilva"
          },
          "Password": {
            "type": "string",
            "description": "A senha do gerente.",
            "minLength": 6,
            "example": "segura123"
          },
          "DocumentNumber": {
            "type": "string",
            "description": "O número do documento do gerente.",
            "minLength": 5,
            "example": "123456789"
          }
        },
        "required": [
          "Name",
          "Surname",
          "BirthDate",
          "Username",
          "Password",
          "DocumentNumber"
        ]
      },
      "CreateMemberCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "O nome do membro",
            "minLength": 2,
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "O sobrenome do membro",
            "minLength": 2,
            "nullable": true
          },
          "userBio": {
            "type": "string",
            "description": "A biografia do usuário",
            "minLength": 10,
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "A data de nascimento do membro"
          },
          "username": {
            "type": "string",
            "description": "O nome de usuário para a conta do membro"
          },
          "password": {
            "type": "string",
            "description": "A senha para a conta do membro",
            "minLength": 6,
            "nullable": true
          },
          "documentNumber": {
            "type": "string",
            "description": "O número do documento associado ao membro",
            "minLength": 5,
            "nullable": true
          }
        },
        "required": [
          "birthDate",
          "username",
          "password",
          "documentNumber"
        ]
      },
      "CreateProfessionalCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "O nome do profissional",
            "minLength": 2,
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "O sobrenome do profissional",
            "minLength": 2,
            "nullable": true
          },
          "userBio": {
            "type": "string",
            "description": "A biografia do profissional",
            "minLength": 10,
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "A data de nascimento do profissional"
          },
          "username": {
            "type": "string",
            "description": "O nome de usuário para a conta do profissional"
          },
          "password": {
            "type": "string",
            "description": "A senha para a conta do profissional",
            "minLength": 6,
            "nullable": true
          },
          "job": {
            "type": "integer",
            "description": "O cargo do profissional",
            "enum": [
              1,
              2,
              3
            ]
          },
          "documentNumber": {
            "type": "string",
            "description": "O número do documento associado ao profissional",
            "minLength": 5,
            "nullable": true
          }
        },
        "required": [
          "birthDate",
          "username",
          "password",
          "job",
          "documentNumber"
        ]
      },
      "GymInfoViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "O nome da academia",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Uma breve descrição da academia",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "O nome de usuário para a conta da academia",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "description": "O token de atualização (refresh token) associado à sessão do usuário",
            "nullable": true
          },
          "refreshTokenExpiryTime": {
            "type": "string",
            "format": "date-time",
            "description": "Data e hora de expiração do token de atualização",
            "nullable": true
          },
          "tokenJWT": {
            "type": "string",
            "description": "O token JWT para autenticação do usuário",
            "nullable": true
          }
        }
      },
      "Job": {
        "type": "integer",
        "enum": [
          1,
          2,
          3
        ],
        "description": "Enumeração representando os diferentes cargos na academia.",
        "example": 1,
        "x-enum-descriptions": {
          "1": "PERSONAL_TRAINER",
          "2": "NUTRICIONIST",
          "3": "GYM_PROFESSOR"
        }
      },
      "ManagerInfoViewModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "O nome do gerente.",
            "example": "João"
          },
          "Surname": {
            "type": "string",
            "description": "O sobrenome do gerente.",
            "example": "Silva"
          },
          "UserBio": {
            "type": "string",
            "description": "A biografia do gerente.",
            "example": "Gerente com vasta experiência em logística.",
            "nullable": true
          },
          "BirthDate": {
            "type": "string",
            "format": "date",
            "description": "A data de nascimento do gerente.",
            "example": "1985-07-20"
          },
          "Username": {
            "type": "string",
            "description": "O nome de usuário do gerente.",
            "example": "joaosilva"
          },
          "RefreshToken": {
            "type": "string",
            "description": "Token de atualização utilizado para renovar a sessão do gerente.",
            "example": "dXNlcm5hbWU6cGFzc3dvcmQ=",
            "nullable": true
          },
          "RefreshTokenExpiryTime": {
            "type": "string",
            "format": "date-time",
            "description": "A data e hora de expiração do token de atualização.",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          }
        }
      },
      "MemberInfoViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "O nome do membro",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "O sobrenome do membro",
            "nullable": true
          },
          "userBio": {
            "type": "string",
            "description": "A biografia do membro",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "A data de nascimento do membro"
          },
          "username": {
            "type": "string",
            "description": "O nome de usuário do membro",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "description": "O token de atualização (refresh token) associado à sessão do membro",
            "nullable": true
          },
          "refreshTokenExpiryTime": {
            "type": "string",
            "format": "date-time",
            "description": "Data e hora de expiração do token de atualização",
            "nullable": true
          },
          "tokenJWT": {
            "type": "string",
            "description": "O token JWT para autenticação do membro",
            "nullable": true
          }
        }
      },
      "ProfessionalInfoViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "O nome do profissional",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "O sobrenome do profissional",
            "nullable": true
          },
          "userBio": {
            "type": "string",
            "description": "A biografia do profissional",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "A data de nascimento do profissional"
          },
          "username": {
            "type": "string",
            "description": "O nome de usuário do profissional",
            "nullable": true
          },
          "job": {
            "type": "integer",
            "description": "O cargo do profissional",
            "enum": [
              1,
              2,
              3
            ]
          },
          "refreshToken": {
            "type": "string",
            "description": "O token de atualização (refresh token) associado à sessão do profissional",
            "nullable": true
          },
          "refreshTokenExpiryTime": {
            "type": "string",
            "format": "date-time",
            "description": "Data e hora de expiração do token de atualização",
            "nullable": true
          },
          "tokenJWT": {
            "type": "string",
            "description": "O token JWT para autenticação do profissional",
            "nullable": true
          }
        }
      },
      "UpdateManagerCommand": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Nome do gerente.",
            "example": "João"
          },
          "Surname": {
            "type": "string",
            "description": "Sobrenome do gerente.",
            "example": "Silva"
          },
          "UserBio": {
            "type": "string",
            "description": "Biografia do gerente.",
            "example": "Gerente com vasta experiência em logística."
          },
          "BirthDate": {
            "type": "string",
            "format": "date",
            "description": "Data de nascimento do gerente.",
            "example": "1985-07-20"
          },
          "Username": {
            "type": "string",
            "description": "Nome de usuário do gerente.",
            "example": "joaosilva"
          },
          "DocumentNumber": {
            "type": "string",
            "description": "Número do documento do gerente (CPF).",
            "example": "123456789"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "https://tools.ietf.org/html/rfc9110#section-15.5.1"
          },
          "title": {
            "type": "string",
            "example": "One or more validation errors occurred."
          },
          "status": {
            "type": "integer",
            "example": 400
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "O campo é obrigatório."
              }
            }
          },
          "traceId": {
            "type": "string",
            "example": "00-f831d795a9d6b9cfef10038505155ce4-b9bc766eb9eb421a-00"
          }
        }
      }
    }
  }
}